# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2020.

# Configuration for https://www.appveyor.com/.

# We filter when we run to specific branches.
branches:
  only:
    - /master.*/

# And we also filter to avoid running when config files for other CIs change.
skip_commits:
 files:
   - .circleci/*
   - azure-pipelines.yml
   - .semaphore/*

# Since we are interested in running on specific compilers we list them
# individually.
environment:
  XCODE_INSTALL_USER:
    secure: 8iaSThocSvqXSaSZiH2G2E1XoHhLmpFmrexfMvwVbcg=
  XCODE_INSTALL_PASSWORD:
    secure: YXiD2orrN565ZnNeLFcha2k6KDuf1i8D1KwlepOvD1Q=
  matrix:
  - job_name: 'VS 2019'
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    VSWHERE_VERSION: '[16.0,17.0)'
    CXX: cl.exe
    CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
  - job_name: 'VS 2017'
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    VSWHERE_VERSION: '[15.0,16.0)'
    CXX: cl.exe
    CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
  - job_name: 'VS 2015'
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    VSWHERE_LEGACY: '[14.0,15.0)'
    CXX: cl.exe
    CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
  - job_name: 'VS 2013'
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    VSWHERE_LEGACY: '[12.0,13.0)'
    CXX: cl.exe
    CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
  - job_name: 'VS 2012'
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    VSWHERE_LEGACY: '[11.0,12.0)'
    CXX: cl.exe
    CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
  - job_name: 'VS 2010'
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    VSWHERE_LEGACY: '[10.0,11.0)'
    CXX: cl.exe
    CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
  - job_name: 'Linux GCC 9'
    APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    CXX: g++-9
    PACKAGES: g++-9
  - job_name: 'Linux GCC 6'
    APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    CXX: g++-6
    PACKAGES: g++-6
  - job_name: 'Linux Clang 9'
    APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    CXX: clang++-9
    PACKAGES: clang-9
    LLVM_REPO: llvm-toolchain-xenial-9
  - job_name: 'Xcode 11.3.1'
    CXX: clang++
    APPVEYOR_BUILD_WORKER_IMAGE: macos
    XCODE_VERSION: 11.3.1
  - job_name: 'Xcode 10.3'
    CXX: clang++
    APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
    XCODE_VERSION: 10.3

# We specify a single job matrix expansion for the platform type.
platform:
  - x86
  - x64

# But with some exclusions where it's not possible.
matrix:
  exclude:
    - job_name: 'VS 2012'
      platform: x64
    - job_name: 'VS 2010'
      platform: x64
    - platform: x86
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    - platform: x86
      APPVEYOR_BUILD_WORKER_IMAGE: macos
    - platform: x86
      APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave

# We use scripts only. Disable msbuild default.
build: off

for:

# Linux job steps.
- matrix:
    only:
      - image: 'Ubuntu'
    except:
      - platform: x86
  install:
    - sh: |
        set -e
        uname -a
        ./.ci_playground/linux-cxx-install.sh
  build_script:
    - sh: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v src/main.cpp

# macOS job steps.
- matrix:
    only:
      - image: 'macos'
      - image: 'macos-mojave'
    except:
      - platform: x86
  install:
    - sh: |
        set -e
        uname -a
        ./.ci_playground/macos-xcode-install.sh
  build_script:
    - sh: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v --sysroot "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" src/main.cpp

# Windows job steps.
install:
  # Appveyor has a specific set of steps that it combines into a single sequence.
  # This one we use for installing VS version (if desired). Although doing so is
  # not practical as it takes a large amount of time to do so. And Appveyor is
  # singular in the large number of VS versions is maintains.
  - cmd: |
      echo ">>>>>"
      echo ">>>>> INSTALL TOOLSET .."
      echo ">>>>>"
      if not "%CHOCO_VS_PACKAGE%"=="" choco install %CHOCO_VS_PACKAGE% -packageParameters "--AdminFile .ci_playground/%CHOCO_VS_PACKAGE%.xml"
      choco install vswhere
build_script:
  # The build itself sets up which VS to use and compiles with it.
  - cmd: |
      echo ">>>>>"
      echo ">>>>> COMPILE, Setup .."
      echo ">>>>>"
      CALL .ci_playground/windows-msvc-setup.cmd
      echo ">>>>>"
      echo ">>>>> COMPILE .."
      echo ">>>>>"
      "%CXX%" %CXXFLAGS% src/main.cpp
