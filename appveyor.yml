# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2020.

# Configuration for https://www.appveyor.com/.

# We filter when we run to specific branches.
branches:
  only:
    - /master.*/

# And we also filter to avoid running when config files for other CIs change.
skip_commits:
  files:
    - .circleci/*
    - .drone.star
    - .github/workflows/*
    - .semaphore/*
    - .travis.yml
    - azure-pipelines.yml

# Since we are interested in running on specific compilers we list them
# individually.
environment:
  XCODE_INSTALL_USER:
    secure: 8iaSThocSvqXSaSZiH2G2E1XoHhLmpFmrexfMvwVbcg=
  XCODE_INSTALL_PASSWORD:
    secure: YXiD2orrN565ZnNeLFcha2k6KDuf1i8D1KwlepOvD1Q=
  matrix:
  - { job_name: 'VS 2019', COMPILER: "MSVC", CXX: cl.exe, CXXFLAGS: '/Femain', VSWHERE_VERSION: '[16.0,17.0)', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2019' }
  - { job_name: 'VS 2017', COMPILER: "MSVC", CXX: cl.exe, CXXFLAGS: '/Femain', VSWHERE_VERSION: '[15.0,16.0)', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'}
  - { job_name: 'VS 2015', COMPILER: "MSVC", CXX: cl.exe, CXXFLAGS: '/Femain', VSWHERE_LEGACY: '[14.0,15.0)', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015' }
  - { job_name: 'VS 2013', COMPILER: "MSVC", CXX: cl.exe, CXXFLAGS: '/Femain', VSWHERE_LEGACY: '[12.0,13.0)', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015' }
  - { job_name: 'VS 2012', COMPILER: "MSVC", CXX: cl.exe, CXXFLAGS: '/Femain', VSWHERE_LEGACY: '[11.0,12.0)', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015' }
  - { job_name: 'VS 2010', COMPILER: "MSVC",CXX: cl.exe, CXXFLAGS: '/Femain', VSWHERE_LEGACY: '[10.0,11.0)', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015' }
  - { job_name: 'Linux GCC 10', COMPILER: "LINUX-GCC", CXX: 'g++-10', PACKAGES: 'g++-10', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux GCC 9', COMPILER: "LINUX-GCC", CXX: 'g++-9', PACKAGES: 'g++-9', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux GCC 8', COMPILER: "LINUX-GCC", CXX: 'g++-8', PACKAGES: 'g++-8', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux GCC 7', COMPILER: "LINUX-GCC", CXX: 'g++-7', PACKAGES: 'g++-7', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux GCC 6', COMPILER: "LINUX-GCC", CXX: 'g++-6', PACKAGES: 'g++-6', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux GCC 5', COMPILER: "LINUX-GCC", CXX: 'g++-5', PACKAGES: 'g++-5', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux Clang 10', COMPILER: "LINUX-CLANG", CXX: 'clang++-10', PACKAGES: 'clang-10', LLVM_OS: 'xenial', LLVM_VER: '10', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux Clang 9', COMPILER: "LINUX-CLANG", CXX: 'clang++-9', PACKAGES: 'clang-9', LLVM_OS: 'xenial', LLVM_VER: '9', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux Clang 8', COMPILER: "LINUX-CLANG", CXX: 'clang++-8', PACKAGES: 'clang-8', LLVM_OS: 'xenial', LLVM_VER: '8', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux Clang 7', COMPILER: "LINUX-CLANG", CXX: 'clang++-7', PACKAGES: 'clang-7', LLVM_OS: 'xenial', LLVM_VER: '7', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux Clang 6.0', COMPILER: "LINUX-CLANG", CXX: 'clang++-6.0', PACKAGES: 'clang-6.0', LLVM_OS: 'xenial', LLVM_VER: '6.0', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Linux Clang 5.0', COMPILER: "LINUX-CLANG", CXX: 'clang++-5.0', PACKAGES: 'clang-5.0', LLVM_OS: 'xenial', LLVM_VER: '5.0', APPVEYOR_BUILD_WORKER_IMAGE: 'Ubuntu' }
  - { job_name: 'Xcode 11.3.1', COMPILER: "XCODE", CXX: clang++, XCODE_VERSION: 11.3.1, APPVEYOR_BUILD_WORKER_IMAGE: macos }
  # - { job_name: 'Xcode 11.2.1'', COMPILER: "XCODE", CXX: clang++, XCODE_VERSION: 11.2.1, APPVEYOR_BUILD_WORKER_IMAGE: macos }
  - { job_name: 'MinGW-w64 8.1', COMPILER: "WIN-MINGW", CXX: 'C:\mingw-w64\i686-8.1.0-posix-dwarf-rt_v6-rev0\bin\g++.exe', APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2019'}

# We specify a single job matrix expansion for the platform type.
platform:
  - x86
  - x64

# But with some exclusions where it's not possible.
matrix:
  exclude:
    - { platform: x64, job_name: 'VS 2012' }
    - { platform: x64, job_name: 'VS 2010' }
    - { platform: x86, COMPILER: 'LINUX-GCC' }
    - { platform: x86, COMPILER: 'LINUX-CLANG' }
    - { platform: x86, COMPILER: 'XCODE' }
    - { platform: x86, COMPILER: 'WIN-MINGW' }

for:

# Linux job steps.
- matrix:
    only:
      - COMPILER: 'LINUX-GCC'
      - COMPILER: 'LINUX-CLANG'
  install:
    - sh: |
        set -e
        uname -a
        ./.ci_playground/linux-cxx-install.sh
  build_script:
    - sh: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v src/main.cpp

# Xcode job steps.
- matrix:
    only:
      - COMPILER: 'XCODE'
  install:
    - sh: |
        set -e
        uname -a
        ./.ci_playground/macos-xcode-install.sh
  build_script:
    - sh: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v --sysroot "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" src/main.cpp

# MSVC job steps.
- matrix:
    only:
      - COMPILER: 'MSVC'
  install:
    # Appveyor has a specific set of steps that it combines into a single sequence.
    # This one we use for installing VS version (if desired). Although doing so is
    # not practical as it takes a large amount of time to do so. And Appveyor is
    # singular in the large number of VS versions is maintains.
    - cmd: |
        echo ">>>>>"
        echo ">>>>> INSTALL TOOLSET .."
        echo ">>>>>"
        if not "%CHOCO_VS_PACKAGE%"=="" choco install %CHOCO_VS_PACKAGE% -packageParameters "--AdminFile .ci_playground/%CHOCO_VS_PACKAGE%.xml"
        choco install vswhere
  build_script:
    # The build itself sets up which VS to use and compiles with it.
    - cmd: |
        echo ">>>>>"
        echo ">>>>> COMPILE, Setup .."
        echo ">>>>>"
        CALL .ci_playground/windows-msvc-setup.cmd
        echo ">>>>>"
        echo ">>>>> COMPILE .."
        echo ">>>>>"
        "%CXX%" %CXXFLAGS% src/main.cpp

# Windows MinGW job steps.
- matrix:
    only:
      - COMPILER: 'MSVC'
  install:
    # Currently we only use the pre-installed MinGW. Hence nothing to do.
    - cmd: |
        echo ">>>>>"
        echo ">>>>> INSTALL TOOLSET .."
        echo ">>>>>"
  build_script:
    # The build itself just calls the compiler directly.
    - cmd: |
        echo ">>>>>"
        echo ">>>>> COMPILE .."
        echo ">>>>>"
        "%CXX%" %CXXFLAGS% src/main.cpp
