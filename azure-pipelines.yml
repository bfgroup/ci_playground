# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2020.

# Configuration for https://azure.microsoft.com/en-us/services/devops/pipelines/.

# We limit when to run the builds to specific branches. And also limit to avoid
# building when CI files from other services change.
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - .circleci/*
    - .drone.star
    - .github/workflows/*
    - .semaphore/*
    - .travis.yml
    - appveyor.yml

# There are many arrangements possible with Azure Pipelines stages. But our
# experimental needs are rather simple. Hence we only have a single stage
# to do our test builds in.

stages:

- stage: Test
  jobs:

  # We group the jobs based on platform as the scripts are usually specific
  # to the platform and not the compiler.
  - job: 'Linux'
    strategy:
      matrix:
        GCC 9: { CXX: g++-9, PACKAGES: g++-9, VM_IMAGE: 'ubuntu-18.04' }
        GCC 7: { CXX: g++-7, PACKAGES: g++-7, VM_IMAGE: 'ubuntu-18.04' }
        Clang 9: { CXX: clang-9, PACKAGES: clang-9, LLVM_OS: xenial, LLVM_VER: 9, VM_IMAGE: 'ubuntu-16.04' }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    # Two simple steps.. The install runs a helper script to do the install
    # and any setup.
    - bash: |
        set -e
        uname -a
        ./.ci_playground/linux-cxx-install.sh
      displayName: Install Toolset
    # And the compiler step just calls the compiler as specified in the
    # matrix.
    - bash: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v src/main.cpp
      displayName: Compile

  - job: 'macOS'
    strategy:
      matrix:
        Xcode 11.4: { CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: 11.4 }
        Xcode 9.4.1: { CXX: clang++, VM_IMAGE: 'macOS-10.14', XCODE_VERSION: 9.4.1 }

    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        export 'XCODE_INSTALL_USER=$(DEV_APPLE_USER)'
        export 'XCODE_INSTALL_PASSWORD=$(DEV_APPLE_PASSWORD)'
        ./.ci_playground/macos-xcode-install.sh
      displayName: Install Toolset
    - bash: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v --sysroot "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" src/main.cpp
      displayName: Compile

  - job: 'Windows'
    strategy:
      matrix:
        VS 2019:
          VSWHERE_VERSION: '[16.0,17.0)'
          CXX: cl.exe
          CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
          PLATFORM: x64
          VM_IMAGE: 'windows-2019'
        VS 2017:
          VSWHERE_VERSION: '[15.0,16.0)'
          CXX: cl.exe
          CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
          PLATFORM: x64
          VM_IMAGE: 'vs2017-win2016'
        # VS 2015:
        #   VSWHERE_LEGACY: '[14.0,15.0)'
        #   CXX: cl.exe
        #   CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
        #   PLATFORM: x64
        #   CHOCO_VS_PACKAGE: VisualStudio2015Community
        #   VM_IMAGE: 'windows-latest'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        echo ">>>>>"
        echo ">>>>> INSTALL TOOLSET .."
        echo ">>>>>"
        if not "%CHOCO_VS_PACKAGE%"=="" choco install %CHOCO_VS_PACKAGE% -packageParameters "--AdminFile .ci_playground/%CHOCO_VS_PACKAGE%.xml"
        choco install vswhere
      displayName: Install
    - script: |
        echo ">>>>>"
        echo ">>>>> COMPILE, Setup .."
        echo ">>>>>"
        .ci_playground/windows-msvc-setup.cmd
        echo ">>>>>"
        echo ">>>>> COMPILE .."
        echo ">>>>>"
        "%CXX%" %CXXFLAGS% src/main.cpp
      displayName: Compile
