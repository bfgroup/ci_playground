# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2020.

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - .circleci/*
    - appveyor.yml
    - .semaphore/*

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 9:
          CXX: g++-9
          PACKAGES: g++-9
          VM_IMAGE: 'ubuntu-18.04'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        ./.ci_playground/linux-cxx-install.sh
      displayName: Install Toolset
    - bash: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v src/main.cpp
      displayName: Compile

  - job: 'macOS'
    strategy:
      matrix:
        Xcode 11.4:
          CXX: clang++
          VM_IMAGE: 'macOS-10.15'
          XCODE_VERSION: 11.4
        Xcode 9.4.1:
          CXX: clang++
          VM_IMAGE: 'macOS-10.14'
          XCODE_VERSION: 9.4.1
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        export 'XCODE_INSTALL_USER=$(DEV_APPLE_USER)'
        export 'XCODE_INSTALL_PASSWORD=$(DEV_APPLE_PASSWORD)'
        ./.ci_playground/macos-xcode-install.sh
      displayName: Install Toolset
    - bash: |
        set -e
        ${CXX} --version
        ${CXX} ${CXXFLAGS} -v --sysroot "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" src/main.cpp
      displayName: Compile

  - job: 'Windows'
    strategy:
      matrix:
        VS 2019:
          VSWHERE_VERSION: '[16.0,17.0)'
          CXX: cl.exe
          CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
          PLATFORM: x64
          VM_IMAGE: 'windows-2019'
        VS 2017:
          VSWHERE_VERSION: '[15.0,16.0)'
          CXX: cl.exe
          CXXFLAGS: /Zi /MT /TP /Femain /Ox /GL /EHsc
          PLATFORM: x64
          VM_IMAGE: 'vs2017-win2016'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        echo ">>>>>"
        echo ">>>>> INSTALL TOOLSET, Setup .."
        echo ">>>>>"
        if not "%VSWHERE_VERSION%"=="" choco install vswhere
        if not "%VSWHERE_VERSION%"=="" ( for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath -version "%VSWHERE_VERSION%"`) do ( set "VCVARSALL=%%i\VC\Auxiliary\Build\vcvarsall.bat" ) )
        if not "%VCVARSALL%"=="" ( set SETUP="%VCVARSALL%" %PLATFORM% )
        %SETUP%
      displayName: Install Toolset
    - script: |
        echo ">>>>>"
        echo ">>>>> COMPILE .."
        echo ">>>>>"
        "%CXX%" %CXXFLAGS% src/main.cpp
      displayName: Compile
