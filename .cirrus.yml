# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE.txt)
#
# Copyright Rene Rivera 2020.

# Configuration for https://cirrus-ci.org/.

# linux_task:
#   # All the GCC's and Clang's available for Ubuntu Bionic.
#   matrix:
#     - { name: 'Linux, GCC 10', env: { CXX: g++-10, PACKAGES: g++-10 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, GCC 9', env: { CXX: g++-9, PACKAGES: g++-9 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, GCC 8', env: { CXX: g++-8, PACKAGES: g++-8 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, GCC 7', env: { CXX: g++-7, PACKAGES: g++-7 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, GCC 6', env: { CXX: g++-6, PACKAGES: g++-6 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, GCC 5', env: { CXX: g++-5, PACKAGES: g++-5 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, Clang 10', env: { CXX: clang++-10, PACKAGES: clang-10, LLVM_OS: bionic, LLVM_VER: 10 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, Clang 9', env: { CXX: clang++-9, PACKAGES: clang-9, LLVM_OS: bionic, LLVM_VER: 9 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, Clang 8', env: { CXX: clang++-8, PACKAGES: clang-8, LLVM_OS: bionic, LLVM_VER: 8 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, Clang 7', env: { CXX: clang++-7, PACKAGES: clang-7, LLVM_OS: bionic, LLVM_VER: 7 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, Clang 6', env: { CXX: clang++-6.0, PACKAGES: clang-6.0, LLVM_OS: bionic, LLVM_VER: 6.0 }, container: { image: 'ubuntu:18.04' } }
#     - { name: 'Linux, Clang 5', env: { CXX: clang++-5.0, PACKAGES: clang-5.0, LLVM_OS: bionic, LLVM_VER: 5.0 }, container: { image: 'ubuntu:18.04' } }
#   # Need some extra container setup.
#   setup_script: [
#     "apt-get -o Acquire::Retries=3 update && apt-get -o Acquire::Retries=3 install -y sudo software-properties-common wget apt-transport-https && rm -rf /var/lib/apt/lists/*"
#     ]
#   # The install runs a helper script to do the install and any setup.
#   install_script: [
#     "uname -a",
#     "./.ci_playground/linux-cxx-install.sh"
#     ]
#   compile_script: [
#     "${CXX} --version",
#     "${CXX} ${CXXFLAGS} -v src/main.cpp"
#     ]

# xcode_task:
#   matrix:
#     - { name: 'macOS, Xcode 11.4.1', env: { CXX: clang++, XCODE_VERSION: 11.4.1 }, osx_instance: { image: 'catalina-xcode-11.4.1' } }
#   # Cirrus CI encrypts using a repo specific internal key. These
#   # encrypted values are taken from the web UI.
#   env:
#     XCODE_INSTALL_USER: ENCRYPTED[eaff152791f8f1c1669b0e43a4f4b5227432242c625feaf325aed8b69de58f21e97b62c24e081ec745629b08d97d7b8f]
#     XCODE_INSTALL_PASSWORD: ENCRYPTED[bf21babc88ec2a4a261e292170017c3fb97ff634fead2ed060119220eecb74e0f9ea216256664cbe8f741c39091aa4d1]
#   # Restrict to our ORG as encrypted vars are ORG local. Hence forks will fail.
#   only_if: $CIRRUS_REPO_OWNER == 'bfgroup'
#   # We just run the common install script, as the env is already set up.
#   install_script: [
#     "set -e",
#     "uname -a",
#     "./.ci_playground/macos-xcode-install.sh"
#     ]
#   # For consistent Xcode building we specify the sysroot to point to the
#   # symlink that xcode-install utility created. This was we always build
#   # with the specific SDK for the compiler being used.
#   compile_script: [
#     "set -e",
#     "${CXX} --version",
#     "${CXX} ${CXXFLAGS} -v --sysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk src/main.cpp"
#     ]

# freebsd_task:
#   # All the GCC's and Clang's currently supported by FreeBSD ports.
#   matrix:
#     - { name: 'FreeBSD, GCC 11', env: { CXX: 'g++11', PACKAGE: 'gcc11-devel' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, GCC 10', env: { CXX: 'g++10', PACKAGE: 'gcc10-devel' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, GCC 9', env: { CXX: 'g++9', PACKAGE: 'gcc9-devel' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, GCC 8', env: { CXX: 'g++8', PACKAGE: 'gcc8-devel' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, GCC 7', env: { CXX: 'g++7', PACKAGE: 'gcc7' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, Clang 10', env: { CXX: 'clang++10', PACKAGE: 'llvm10' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, Clang 9', env: { CXX: 'clang++90', PACKAGE: 'llvm90' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, Clang 8', env: { CXX: 'clang++80', PACKAGE: 'llvm80' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, Clang 7', env: { CXX: 'clang++70', PACKAGE: 'llvm70' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#     - { name: 'FreeBSD, Clang 6', env: { CXX: 'clang++60', PACKAGE: 'llvm60' }, freebsd_instance: { image_family: 'freebsd-13-0-snap' } }
#   # To install with ports we need to initialize the package manager. To avoid
#   # confirmation prompts we need to set an env var.
#   install_script: [
#     "uname -a",
#     "env ASSUME_ALWAYS_YES=YES pkg bootstrap",
#     "env ASSUME_ALWAYS_YES=YES pkg install ${PACKAGE}"
#     ]
#   # Compiling is simply calling the compiler.
#   compile_script: [
#     "${CXX} --version",
#     "${CXX} ${CXXFLAGS} -v src/main.cpp"
#     ]

msvc_task:
  matrix:
    - { name: 'Windows, VS 2019', env: { CXX: cl.exe, CXXFLAGS: /Femain, VSWHERE_VERSION: '[16.0,17.0)', PLATFORM: x64, CHOCO_CONFIG: vs2019 } }
  windows_container:
    image: cirrusci/windowsservercore:2019
  install_script: [
    "choco install .ci_playground/choco-%CHOCO_CONFIG%.config -y --ignore-detected-reboot --no-progress",
    "choco install vswhere -y --no-progress"
    ]
  compile_script: [
    ".ci_playground/windows-msvc-setup.cmd",
    "\"%CXX%\" %CXXFLAGS% src/main.cpp"
    ]
