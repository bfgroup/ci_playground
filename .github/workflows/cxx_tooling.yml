# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2020.

# Configuration for https://help.github.com/en/actions.

name: C++ Tooling

# We limit when to run the builds to specific branches. And also limit to avoid
# building when CI files from other services change.
on:
  push:
    branches: [ 'master' ]
    paths-ignore: [
      '.circleci/**',
      '.drone.star',
      '.semaphore/**',
      '.travis.yml',
      'appveyor.yml',
      'azure-pipelines.yml' ]

# We group the jobs based on platform as the scripts are usually specific
# to the platform and not the compiler.
jobs:
  linux:
    strategy:
      matrix:
        include:
          - { name: 'GCC 10', cxx: 'g++-10', packages: 'g++-10', os: 'ubuntu-18.04' }
          - { name: 'GCC 9', cxx: 'g++-9', packages: 'g++-9', os: 'ubuntu-18.04' }
          - { name: 'GCC 8', cxx: 'g++-8', packages: 'g++-8', os: 'ubuntu-18.04' }
          - { name: 'GCC 7', cxx: 'g++-7', packages: 'g++-7', os: 'ubuntu-18.04' }
          - { name: 'GCC 6', cxx: 'g++-6', packages: 'g++-6', os: 'ubuntu-18.04' }
          - { name: 'GCC 5', cxx: 'g++-5', packages: 'g++-5', os: 'ubuntu-18.04' }
          - { name: 'Clang 10', cxx: 'clang-10', packages: 'clang-10', llvm_os: 'bionic', llvm_ver: '10', os: 'ubuntu-18.04' }
          - { name: 'Clang 9', cxx: 'clang-9', packages: 'clang-9', llvm_os: 'bionic', llvm_ver: '9', os: 'ubuntu-18.04' }
          - { name: 'Clang 8', cxx: 'clang-8', packages: 'clang-8', llvm_os: 'bionic', llvm_ver: '8', os: 'ubuntu-18.04' }
          - { name: 'Clang 7', cxx: 'clang-7', packages: 'clang-7', llvm_os: 'bionic', llvm_ver: '7', os: 'ubuntu-18.04' }
          - { name: 'Clang 6.0', cxx: 'clang-6.0', packages: 'clang-6.0', llvm_os: 'bionic', llvm_ver: '6.0', os: 'ubuntu-18.04' }
          - { name: 'Clang 5.0', cxx: 'clang-5.0', packages: 'clang-5.0', llvm_os: 'bionic', llvm_ver: '5.0', os: 'ubuntu-18.04' }
    name: Linux ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{ matrix.cxx }}
      CXXFLAGS: ${{ matrix.cxxflags }}
      PACKAGES: ${{ matrix.packages }}
      LLVM_OS: ${{ matrix.llvm_os }}
      LLVM_VER: ${{ matrix.llvm_ver }}
    steps:
      # GitHub actions doesn't checkout your code by default. Instead we need
      # to call an external action to do the checkout. We use the 'naster'
      # branch of that external action to automatically get fixes.
      - name: 'Checkout'
        uses: actions/checkout@master
        with: { submodules: true }
      # Two simple steps.. The install runs a helper script to do the install
      # and any setup.
      - name: 'Install Toolset'
        run: |
          set -e
          uname -a
          ./.ci_playground/linux-cxx-install.sh
      # And the compiler step just calls the compiler as specified in the
      # matrix.
      - name: 'Compile'
        run: |
          set -e
          ${CXX} --version
          ${CXX} ${CXXFLAGS} -v src/main.cpp
  macos-xcode:
    strategy:
      matrix:
        include:
          - { name: 'Xcode 11.4.1', cxx: 'clang++', xcode_version: '11.4.1', os: 'macOS-10.15' }
          - { name: 'Xcode 11.3.1', cxx: 'clang++', xcode_version: '11.3.1', os: 'macOS-10.15' }
          - { name: 'Xcode 11.2.1', cxx: 'clang++', xcode_version: '11.2.1', os: 'macOS-10.15' }
          - { name: 'Xcode 10.3', cxx: 'clang++', xcode_version: '10.3', os: 'macOS-10.15' }
    name: macOS ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{ matrix.cxx }}
      CXXFLAGS: ${{ matrix.cxxflags }}
      XCODE_VERSION: ${{ matrix.xcode_version }}
      XCODE_INSTALL_USER: ${{ secrets.dev_apple_user }}
      XCODE_INSTALL_PASSWORD: ${{ secrets.dev_apple_password }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
        with: { submodules: true }
      - name: 'Install Toolset'
        run: |
          set -e
          uname -a
          ./.ci_playground/macos-xcode-install.sh
      - name: 'Compile'
        run: |
          set -e
          ${CXX} --version
          ${CXX} ${CXXFLAGS} -v --sysroot "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" src/main.cpp
  windows-vs:
    strategy:
      matrix:
        include:
          - name: 'VS 2019'
            vswhere_version: '[16.0,17.0)'
            cxx: 'cl.exe'
            cxxflags: '/Zi /MT /TP /Femain /O2 /GL /EHsc'
            platform: 'x64'
            os: 'windows-2019'
          - name: 'VS 2017'
            vswhere_version: '[15.0,16.0)'
            cxx: 'cl.exe'
            cxxflags: '/Zi /MT /TP /Femain /O2 /GL /EHsc'
            platform: 'x64'
            os: 'vs2017-win2016'
    defaults: { run: { shell: cmd } }
    name: Windows ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{ matrix.cxx }}
      CXXFLAGS: ${{ matrix.cxxflags }}
      VSWHERE_VERSION: ${{ matrix.vswhere_version }}
      PLATFORM: ${{ matrix.platform }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
        with: { submodules: true }
      - name: 'Install Toolset'
        run: |
          echo ">>>>>"
          echo ">>>>> INSTALL TOOLSET .."
          echo ">>>>>"
          if not "%CHOCO_VS_PACKAGE%"=="" choco install %CHOCO_VS_PACKAGE% -packageParameters "--AdminFile .ci_playground/%CHOCO_VS_PACKAGE%.xml"
          choco install vswhere
      - name: 'Compile'
        run: |
          echo ">>>>>"
          echo ">>>>> COMPILE, Setup .."
          echo ">>>>>"
          .ci_playground/windows-msvc-setup.cmd
          echo ">>>>>"
          echo ">>>>> COMPILE .."
          echo ">>>>>"
          "%CXX%" %CXXFLAGS% src/main.cpp
  windows-mingw:
    strategy:
      matrix:
        include:
          - name: 'Mingw'
            cxx: 'g++.exe'
            os: 'windows-2019'
    defaults: { run: { shell: cmd } }
    name: Windows ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{ matrix.cxx }}
      CXXFLAGS: ${{ matrix.cxxflags }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
        with: { submodules: true }
      - name: 'Install Toolset'
        run: |
          echo ">>>>>"
          echo ">>>>> INSTALL TOOLSET .."
          echo ">>>>>"
      - name: 'Compile'
        run: |
          echo ">>>>>"
          echo ">>>>> COMPILE .."
          echo ">>>>>"
          "%CXX%" --version
          "%CXX%" %CXXFLAGS% -v src/main.cpp
